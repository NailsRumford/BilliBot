import logging
from gpt.gpt_assistant import GPTAssistant
from telegram import __version__ as TG_VER
from database_manager.utils import save_user_profile, load_user_profile, session
from database_manager.models import UserProfile
from concurrent.futures import ThreadPoolExecutor
try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from user_manager.user_manager import UserManager
from core import settings

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

executor = ThreadPoolExecutor(max_workers=1)
user_manager = UserManager()
gif_messages = {}

def crate_keyboard(response_dict):
    keyboard = [
        [response_dict['OPTION 1']],
        [response_dict['OPTION 2']],
        [response_dict['OPTION 3']],
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    return reply_markup

def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu

# –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
start_button_regex = '|'.join(settings.START_BUTTON)
# –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤
genres_regex = '|'.join(settings.GENRES)
# –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–∏—Ä–æ–≤
worlds_regex = '|'.join(settings.WORLDS)
# –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
combined_regex = genres_regex + '|' + worlds_regex

class MessageProcessor:
    def __init__(self, user_manager, gpt_assistant):
        self.user_manager = user_manager
        self.gpt_assistant = gpt_assistant

    async def send_message(self, update, context, text: str, user_id, start: bool = False):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        gif_message = gif_messages[user_id]
        gpt_assistant = GPTAssistant()
        response_dict = {}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è response_dict
        try:
            if start:
                response_dict = await gpt_assistant.get_gpt_start_response(text, user_id)
            else:
                response_dict = await gpt_assistant.get_gpt_hystory_response(text, user_id)
        except:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id, message_id=gif_message.message_id)
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–≥—Ä—É")
            return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ response_dict
        await context.bot.delete_message(
            chat_id=update.effective_chat.id, message_id=gif_message.message_id)
        reply_markup = crate_keyboard(response_dict)
        text = f"–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –¥–∞–π—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:"
        try:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                                text=f"{response_dict['GAMEMASTER']}", reply_markup=reply_markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Ü–µ–Ω–∞—Ä–∏–µ–º: {e}")

    async def process_start(self,update , context):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        user = update.effective_user
        user_history = load_user_profile(user.id)
        if user_history is not None:
            if not user_history.game_started:
                await update.message.reply_text('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –Ω–∞–∂–º–∏—Ç–µ Restart')
            elif user_history.game_settings_created:
                await update.message.reply_text('–ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–≥—Ä—ã')
        else:
            user_history = UserProfile(
                game_settings_created=True, user=user.id)
            save_user_profile(user_history)
            button_list = [KeyboardButton(s) for s in settings.START_BUTTON]
            reply_markup = ReplyKeyboardMarkup(build_menu(
                button_list, n_cols=2), resize_keyboard=True)
            await update.message.reply_text('–í—ã –Ω–∞—Ö–æ–¥–µ—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:', reply_markup=reply_markup)

    async def process_restart(self,update , context):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restart
        user = update.effective_user
        user_history = load_user_profile(user.id)
        if user_history:
            user_history.delete(session)
        await self.process_start(update , context)

    async def process_help(self,update , context):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        help_text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø - –†–æ–ª–µ–≤–æ–π –±–æ—Ç. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π:\n\n"
            "/start: –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
            "/restart: –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤–∞—à—É —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å—ã.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –æ—Ç–≤–µ—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –∏–≥—Ä–µ.\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –æ–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞, –∫–æ–≥–¥–∞ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –∏—Ö –≤ —Ö–æ–¥–µ –∏–≥—Ä—ã. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–Ω–æ—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!"
        )
        await update.message.reply_text(help_text)

    async def process_text(self, update , context):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.user_manager.get_user(update.effective_user.id)
        user_history = load_user_profile(user.id)
        if user.is_processing:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞.")
        elif not user_history.game_started:
            await update.message.reply_text('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É , –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É')
        else:
            await user.start_processing()
            remove_keyboard = ReplyKeyboardRemove()
            gif_messages[user.id] = await context.bot.send_animation(
                chat_id=update.effective_chat.id,
                animation='https://i.gifer.com/OVBs.gif',
                reply_markup=remove_keyboard
            )
            await self.send_message(update , context,
                                    text=update.message.text,
                                    user_id=user.id)
            await user.end_processing()

    async def process_start_setting_menu(self,update , context, buttons) -> None:
        user = update.effective_user
        user_history = load_user_profile(user.id)
        if user_history.game_started:
            await update.message.reply_text('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –Ω–∞–∂–º–∏—Ç–µ Restart')
        else:
            button_list = [KeyboardButton(s) for s in buttons]
            reply_markup = ReplyKeyboardMarkup(build_menu(
                button_list, n_cols=2), resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=reply_markup)

    async def process_menu_choice(self,update , context):
        text = update.message.text
        user = update.effective_user
        if text == 'üìö –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –º–∏—Ä—ã':
            await self.process_start_setting_menu(update , context, buttons=settings.WORLDS)
        elif text == 'üé≠ –ñ–∞–Ω—Ä—ã':
            await self.process_start_setting_menu(update , context,buttons=settings.GENRES)
        else:
            await self.send_message(update , context, text, user.id)

    async def process_start_history(self, update , context):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
        text = update.message.text
        user = update.effective_user
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}")
        remove_keyboard = ReplyKeyboardRemove()
        gif_messages[user.id] = await context.bot.send_animation(
            chat_id=update.effective_chat.id,
            animation='https://i.gifer.com/OVBs.gif',
            reply_markup=remove_keyboard
        )
        await self.send_message(update, context, text, user_id=user.id, start=True)

def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(settings.TELEGRAM_TOKEN).build()
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_processor = MessageProcessor(user_manager, gpt_assistant = GPTAssistant())
    # on different commands - answer in Telegram
    application.add_handler(CommandHandler(
        "start", message_processor.process_start))
    application.add_handler(CommandHandler(
        "restart", message_processor.process_restart))
    application.add_handler(CommandHandler(
        "help", message_processor.process_help))
    application.add_handler(MessageHandler(filters.Regex(
        f'^({start_button_regex})$'), message_processor.process_menu_choice))
    application.add_handler(MessageHandler(filters.Regex(
        f'^({combined_regex})$'), message_processor.process_start_history))
    # on non command i.e message - echo the message on Telegram
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, message_processor.process_text))
    # Run the bot until the user presses Ctrl-C
    application.run_polling()

if __name__ == "__main__":
    main()